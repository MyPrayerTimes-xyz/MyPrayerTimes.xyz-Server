@page "/"
@using myprayertimes.esolat
@using myprayertimes.esolat.Endpoint
@using myprayertimes.esolat.Extensions
@using myprayertimes.esolat.Models
@using MyPrayerTimes.xyz_Server.Services
@using Newtonsoft.Json
@using Constants = myprayertimes.esolat.Endpoint.Constants
@inject EsolatApi _esolatApi;
@inject ServerStorageService _serverStorageService;
@inject Blazored.LocalStorage.ILocalStorageService _localStorage;
@inject HttpClient _httpClient;

<PageTitle>MyPrayerTimes.xyz</PageTitle>

  <div class="page-wrapper">
      <!-- Content wrapper start -->
    <div class="content-wrapper">
        <div class="container">
            <div class="card shadow-lg">
                <div class="card-title">
                    MyPrayerTimes.xyz
                    <div class=""><span class="font-size-14">Waktu Solat Malaysia</span></div>
                </div>
                
                <hr/>
                <div class="text-center mt-20 badge">@CurrentTime?.Date.ToString("yyyy-MM-dd")</div>
                <div class="text-center mt-20 badge">@CurrentTime?.Hijri</div>

                <div class=" mt-10">
                    <select value="@CurrentCode" onchange="@SetZone" class="form-control">
                        @foreach (var zone in Constants.Zones)
                        {
                            <option value="@zone.Key">@zone.Value.Code - @zone.Value.Name</option>
                        }
                    </select>
                </div>
                
                <div class="row mt-20 m-auto">
                    <table class="table table-striped">
                        <tbody>
                        <tr>
                            <td class="text-center">Imsak</td>
                            <td class="text-center">@CurrentTime?.Imsak.ToString("HH:mm")</td>
                        </tr>
                        <tr>
                            <td class="text-center">Subuh</td>
                            <td class="text-center">@CurrentTime?.Subuh.ToString("HH:mm")</td>
                        </tr>
                        <tr>
                            <td class="text-center">Syuruk</td>
                            <td class="text-center">@CurrentTime?.Syuruk.ToString("HH:mm")</td>
                        </tr>
                        <tr>
                            <td class="text-center">Zohor</td>
                            <td class="text-center">@CurrentTime?.Zohor.ToString("HH:mm")</td>
                        </tr>
                        <tr>
                            <td class="text-center">Asar</td>
                            <td class="text-center">@CurrentTime?.Asar.ToString("HH:mm")</td>
                        </tr>
                        <tr>
                            <td class="text-center">Maghrib</td>
                            <td class="text-center">@CurrentTime?.Maghrib.ToString("HH:mm")</td>
                        </tr>
                        <tr>
                            <td class="text-center">Isyak</td>
                            <td class="text-center">@CurrentTime?.Isyak.ToString("HH:mm")</td>
                        </tr>
                        </tbody>
                    </table>
                </div>
                
                <div class="text-center text-muted mt-20">
                    Dibuat oleh <a href="//ijat.my" class="text-white">ijat.my</a>
                </div>
                <div class="text-center text-muted">
                    Waktu solat dari <a href="//www.nuget.org/profiles/ijat" class="text-white">myprayertimes.esolat</a>
                </div>
            </div>
        </div>
    </div>
    <!-- Content wrapper end -->

  </div>
  <!-- Page wrapper end -->

@code
{
    private string? CurrentCode { get; set; }
    private EsolatResponse? CurrentWs { get; set; }
    private PrayerTime? CurrentTime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CurrentCode = await _localStorage.GetItemAsStringAsync("zon");
            if (string.IsNullOrEmpty(CurrentCode))
                await _localStorage.SetItemAsStringAsync("zon", Constants.Zones[ZoneCode.WLY01].ToString());

            CurrentWs = await GetWaktuSolat(CurrentCode);
            StateHasChanged();
        }
    }

    private async Task SetZone(ChangeEventArgs eventArgs)
    {
        var selectedZone = eventArgs.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedZone))
        {
            CurrentCode = selectedZone;
            await _localStorage.SetItemAsStringAsync("zon", CurrentCode);
            await GetWaktuSolat(CurrentCode);
            StateHasChanged();
        }
    }

    private async Task<EsolatResponse?> GetWaktuSolat(string zone)
    {
        var key = $"{DateTime.Now.ToString(Constants.DurationFormat)}_{zone}";
        // var keyBackup = key + "_yearly";
        EsolatResponse? final;

        if (!_serverStorageService.Cache().ContainsKey(key))
        {
            Enum.TryParse(zone, out ZoneCode zoneCode);
            final = await _esolatApi.GetWaktuSolatAsync(Constants.Zones[zoneCode], Period.Daily);
            
            if (final != null)
                _serverStorageService.Cache()[key] = final;
            
            Console.WriteLine($"[GET] {DateTime.Now} - {key} - {JsonConvert.SerializeObject(final)}");
        }
        else
        {
            final = _serverStorageService.Cache()[key];
            Console.WriteLine($"[Cache] {DateTime.Now} - {key} - {JsonConvert.SerializeObject(final)}");
        }

        CurrentTime = final?.PrayerTime?.FirstOrDefault(p => p.Date.Day == DateTime.Now.Day &&
                                                           p.Date.Month == DateTime.Now.Month &&
                                                           p.Date.Year == DateTime.Now.Year);
        return final;
    }
}
